---
interface Props {
    path: string;
    list: Record<string, any[]>;
}

const { path, list } = Astro.props;

import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/**/*.{jpg,png}");
function GetImage(name) { return images[`${path}/${name}`](); }

const headers = list.headers; // Extract headers
delete list.headers; // Remove headers from list to avoid rendering it as a category
---

<div class="imagesGridWrapper">
    <input id="searchBox" type="text" placeholder="Search..."/>
    
    {Object.entries(list).map(([category, items]) => (
        <div class="category-section">
            <h2 id={category.toLowerCase().replace(/\s+/g, '-')}>{category}</h2>
            <ul class="imagesGrid">
                {items.map((item) => (
                    <li>
                        <div>
                            <starlight-image-zoom-zoomable>
                                <Image src={(GetImage(item[0]))} alt={item[1]}/>
                            </starlight-image-zoom-zoomable>
                        </div>
                        {item.slice(1).map((text, index) => (
                            <span><b>{headers[index + 1]}</b>: {text}</span>
                        ))}
                    </li>
                ))}
            </ul>
        </div>
    ))}
</div>

<style>
    .imagesGrid {
        display: grid;
        padding: 0;
        list-style: none;
        grid-gap: 1rem;
        grid-template-columns: 1fr 1fr 1fr;
    }

    .imagesGrid img {
        border: 1px solid var(--sl-color-gray-5);
    }

    .imagesGrid b {
        color: #fff;
    }

    @media screen and (max-width: 992px) {
        .imagesGrid {
            grid-template-columns: 1fr 1fr;
        }
    }

    @media screen and (max-width: 600px) {
        .imagesGrid {
            grid-template-columns: 1fr;
        }
    }

    .imagesGrid > li {
        display: flex;
        flex-direction: column;
        padding: 1em;
        background-color: var(--sl-color-black);
        border: 1px solid var(--sl-color-gray-5);
        border-radius: 0.25rem;
        margin-top: 0px !important;
    }

    .category-section {
        margin-bottom: 2rem;
    }

    .category-section h2 {
        color: #fff;
        margin-bottom: 1rem;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const searchBox = document.getElementById("searchBox");
        const categories = document.querySelectorAll(".category-section");

        searchBox.addEventListener("input", (event) => {
            const query = event.target.value.toLowerCase();

            categories.forEach(category => {
                let anyVisible = false;
                const items = category.querySelectorAll("li");

                items.forEach(item => {
                    let searchMatches = false;
                    const spans = item.getElementsByTagName("span");

                    for (let span of spans) {
                        if (span.innerText.toLowerCase().includes(query)) {
                            searchMatches = true;
                            break;
                        }
                    }

                    item.style.display = searchMatches ? "" : "none";
                    if (searchMatches) anyVisible = true;
                });

                category.style.display = anyVisible ? "" : "none";
            });
        });
    });
</script>
